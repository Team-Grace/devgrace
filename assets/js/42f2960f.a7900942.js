"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8469],{7438:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(2082),r=t(289);const s={},i="useFileReader",o={id:"react/hooks/useFileReader",title:"useFileReader",description:"A custom hook that reads a File object with the desired read method (readAsText, readAsDataURL, readAsArrayBuffer) and returns the read file content.",source:"@site/docs/react/hooks/useFileReader.mdx",sourceDirName:"react/hooks",slug:"/react/hooks/useFileReader",permalink:"/devgrace/docs/react/hooks/useFileReader",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useDebounce",permalink:"/devgrace/docs/react/hooks/useDebounce"},next:{title:"useForceUpdate",permalink:"/devgrace/docs/react/hooks/useForceUpdate"}},d={},c=[{value:"Interface",id:"interface",level:2},{value:"Usage",id:"usage",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"usefilereader",children:"useFileReader"}),"\n",(0,a.jsxs)(n.p,{children:["A custom hook that reads a ",(0,a.jsx)(n.code,{children:"File"})," object with the desired read method (",(0,a.jsx)(n.code,{children:"readAsText"}),", ",(0,a.jsx)(n.code,{children:"readAsDataURL"}),", ",(0,a.jsx)(n.code,{children:"readAsArrayBuffer"}),") and returns the read file content."]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"type ReadType = 'readAsText' | 'readAsDataURL' | 'readAsArrayBuffer';\n\ninterface FileContent {\n  status: 'fulfilled' | 'rejected';\n  readValue: string | ArrayBuffer;\n  originFile: Nullable<File>;\n}\n\ninterface ReadFileOptions {\n  file: FileList | File;\n  readType: ReadType;\n  accepts?: string[];\n}\n\nconst useFileReader: () => {\n  readFile: ({\n    file,\n    readType,\n    accepts,\n  }: ReadFileOptions) => Promise<FileContent[]>;\n  fileContents: FileContent[];\n  isLoading: boolean;\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { useFileReader } from '@devgrace/react';\n\nconst Example = () => {\n  const { readFile, fileContents, loading } = useFileReader()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if(!e.target.files) return;\n\n    readFile({ file: e.target.files, readType: 'readAsText' }); \n    /*\n     * 1. readFile returns a Promise<FileContent[]>. Its value is the same as fileContents.\n     * ex) const data = await readFile(e.target.files, 'readAsDataURL'); \n     * \n     * 2. accepts option allows you to read only the file types you want.\n     * accepts option is not passed, all file types are accepted.\n     * ex) readFile({ file: e.target.files, readType: 'readAsText', accepts: ['text/plain'] }); \n     */\n  }\n\n  return (\n    <div>\n      <input multiple type=\"file\" onChange={handleChange} />\n    </div>\n  );\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},289:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var a=t(8290);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);