"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5350],{5095:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var s=t(5735),r=t(289);const c={},o="useOnClickOutside",i={id:"react/hooks/useOnClickOutside",title:"useOnClickOutside",description:"ref\ub97c \ud560\ub2f9\ud55c \ud0c0\uac9f \uc5d8\ub9ac\uba3c\ud2b8 \uc678\ubd80 \uc694\uc18c\ub97c \ud074\ub9ad \ud560 \uacbd\uc6b0 \ucf5c\ubc31 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ucee4\uc2a4\ud140 \ud6c5\uc785\ub2c8\ub2e4.",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/react/hooks/useOnClickOutside.mdx",sourceDirName:"react/hooks",slug:"/react/hooks/useOnClickOutside",permalink:"/devgrace/ko/docs/react/hooks/useOnClickOutside",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useMergeRefs",permalink:"/devgrace/ko/docs/react/hooks/useMergeRefs"},next:{title:"usePreservedCallback",permalink:"/devgrace/ko/docs/react/hooks/usePreservedCallback"}},a={},u=[{value:"Interface",id:"interface",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"useonclickoutside",children:"useOnClickOutside"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ref"}),"\ub97c \ud560\ub2f9\ud55c \ud0c0\uac9f \uc5d8\ub9ac\uba3c\ud2b8 \uc678\ubd80 \uc694\uc18c\ub97c \ud074\ub9ad \ud560 \uacbd\uc6b0 \ucf5c\ubc31 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ucee4\uc2a4\ud140 \ud6c5\uc785\ub2c8\ub2e4."]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const useOnClickOutside: <T extends HTMLElement>(\n  action: (targetElement: T) => void\n) => {\n  ref: React.RefObject<T>;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useMemo } from 'react';\nimport { useOnClickOutside } from '@devgrace/react';\n\nconst Example = () => {\n  const { ref } = useOnClickOutside<HTMLDivElement>(() => {\n    window.alert('outside click')\n  });\n  \n  const boxStyle = useMemo(() => {\n    return {\n      width: '400px',\n      height: '400px',\n      background: '#439966',\n      fontSize: '1.5rem',\n      color: '#fff',\n    };\n  }, []);\n\n  return (\n    <div ref={ref} style={boxStyle}>\n      Target Box\n    </div>\n  );\n};\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},289:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var s=t(4614);const r={},c=s.createContext(r);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);