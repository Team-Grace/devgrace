"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3441],{7400:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>a,toc:()=>u});var s=r(5735),t=r(289);const c={},o="useMergeRefs",a={id:"react/hooks/useMergeRefs",title:"useMergeRefs",description:"\uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 \uc5ec\ub7ec \uac1c\uc758 ref\ub97c \ud558\ub098\ub85c \ubcd1\ud569\ud560 \ub54c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \ucee4\uc2a4\ud140 \ud6c5\uc785\ub2c8\ub2e4.",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/react/hooks/useMergeRefs.mdx",sourceDirName:"react/hooks",slug:"/react/hooks/useMergeRefs",permalink:"/devgrace/ko/docs/react/hooks/useMergeRefs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useMediaQuery",permalink:"/devgrace/ko/docs/react/hooks/useMediaQuery"},next:{title:"useOnClickOutside",permalink:"/devgrace/ko/docs/react/hooks/useOnClickOutside"}},i={},u=[{value:"Interface",id:"interface",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"usemergerefs",children:"useMergeRefs"}),"\n",(0,s.jsxs)(n.p,{children:["\uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 \uc5ec\ub7ec \uac1c\uc758 ",(0,s.jsx)(n.code,{children:"ref"}),"\ub97c \ud558\ub098\ub85c \ubcd1\ud569\ud560 \ub54c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \ucee4\uc2a4\ud140 \ud6c5\uc785\ub2c8\ub2e4."]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const useMergeRefs: <T = any>(\n  ...refs: (React.MutableRefObject<T> | React.LegacyRef<T>)[]\n) => (instance: T | null) => void;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, { forwardRef, useRef } from 'react';\nimport { useMergeRefs } from '@devgrace/react';\n\ninterface Props {\n  /* ... */\n}\n\nconst Example = forwardRef<HTMLDivElement, Props>((props, ref) => {\n  const childRef = useRef<HTMLDivElement | null>(null);\n\n  return <div ref={useMergeRefs(childRef, ref)}>{/* ... */}</div>;\n});\n"})})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},289:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>o});var s=r(4614);const t={},c=s.createContext(t);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);